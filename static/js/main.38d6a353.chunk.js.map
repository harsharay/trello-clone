{"version":3,"sources":["Components/Board/Board.js","Components/Dashboard/Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["Board","props","useState","name","id","tasks","board1","board1Data","setBoard1Data","board2","board2Data","setBoard2Data","board3","onDragEnd","event","console","log","destination","source","droppableId","items","splice","index","reorderedItem","sourceIds","itemToBeMoved","destinationIds","provided","droppableProps","ref","innerRef","placeholder","className","map","task","draggableId","draggableProps","dragHandleProps","Dashboard","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wTA8KeA,G,YAtKD,SAACC,GAAU,MAoBJC,mBAAS,CACtBC,KAAM,eACNC,GAAI,QACJC,MAAO,CAAC,QAAQ,SAAS,WAHtBC,EApBc,sBAyBaJ,mBAASI,EAAOD,OAzB7B,mBAyBhBE,EAzBgB,KAyBJC,EAzBI,OA2BJN,mBAAS,CACtBC,KAAM,cACNC,GAAI,SACJC,MAAO,CAAC,QAAQ,WAHbI,EA3Bc,sBAgCaP,mBAASO,EAAOJ,OAhC7B,mBAgChBK,EAhCgB,KAgCJC,EAhCI,OAkCJT,mBAAS,CACtBC,KAAM,WACNC,GAAI,QACJC,MAAO,CAAC,YAHLO,EAlCc,sBAuCaV,mBAASU,EAAOP,OAvC7B,6BAsGrB,OACI,eAAC,IAAD,CAAiBQ,UA7DC,SAACC,GAEnB,GADAC,QAAQC,IAAI,GAAIT,EAAYG,GACxBI,EAAMG,YAKV,GAFAF,QAAQC,IAAI,GAAIF,EAAOA,EAAMI,OAAOC,aAEjCL,EAAMI,OAAOC,cAAgBL,EAAMG,YAAYE,aAC9C,GAAgC,SAA7BL,EAAMI,OAAOC,YAAuB,CACnC,IAAMC,EAAK,YAAOb,GAClBQ,QAAQC,IAAI,GAAII,GAFmB,MAGXA,EAAMC,OAAOP,EAAMI,OAAOI,MAAO,GAAlDC,EAH4B,oBAInCH,EAAMC,OAAOP,EAAMG,YAAYK,MAAM,EAAEC,GACvCf,EAAcY,QACX,GAAgC,SAA7BN,EAAMI,OAAOC,YAAuB,CAC1C,IAAMC,EAAK,YAAOV,GADwB,EAElBU,EAAMC,OAAOP,EAAMI,OAAOI,MAAO,GAAlDC,EAFmC,oBAG1CH,EAAMC,OAAOP,EAAMG,YAAYK,MAAM,EAAEC,GACvCZ,EAAcS,QAEf,CAEH,IAAII,EACAC,EAFJV,QAAQC,IAAI,uBAGoB,SAA7BF,EAAMI,OAAOC,YACZK,EAAS,YAAOjB,GACmB,SAA7BO,EAAMI,OAAOC,cACnBK,EAAS,YAAOd,IAPjB,IAoBCgB,EApBD,EAUeF,EAAUH,OAAOP,EAAMI,OAAOI,MAAO,GAAtDG,EAVE,oBAY6B,SAA7BX,EAAMI,OAAOC,aACZJ,QAAQC,IAAI,GAAIQ,GACjBhB,EAAcgB,IAEbb,EAAca,GAElBT,QAAQC,IAAIQ,GAGyB,SAAlCV,EAAMG,YAAYE,YACjBO,EAAc,YAAOnB,GACmB,SAAlCO,EAAMG,YAAYE,cACxBO,EAAc,YAAOhB,IAIzBgB,EAAeL,OAAOP,EAAMG,YAAYK,MAAM,EAAGG,GAEZ,SAAlCX,EAAMG,YAAYE,YACjBX,EAAckB,GAEdf,EAAce,GAElBX,QAAQC,IAAI,IAAKU,EAAgBZ,EAAMG,YAAYE,eAMvD,UACI,cAAC,IAAD,CAAWA,YAAY,OAAvB,SACK,SAACQ,GAAD,OACG,gDAASA,EAASC,gBAAlB,IAAkCC,IAAKF,EAASG,SAAhD,UACKH,EAASI,YACV,qBAAKC,UAAU,aAAf,SACI,oBAAIA,UAAU,YAAd,SACMzB,EAAW0B,KAAI,SAACC,EAAMZ,GACpB,OACI,cAAC,IAAD,CAA2Ba,YAAab,EAAM,IAAKA,MAAOA,EAA1D,SACC,SAACK,GACE,OACI,yDACAE,IAAKF,EAASG,UACVH,EAASS,gBACTT,EAASU,iBAHb,cAKKf,EAAM,EALX,KAKgBY,KALPZ,KAHDA,EAAM,mBAsBlD,cAAC,IAAD,CAAWH,YAAY,OAAvB,SACK,SAACQ,GAAD,OACG,gDAASA,EAASC,gBAAlB,IAAkCC,IAAKF,EAASG,SAAhD,UACKH,EAASI,YACV,qBAAKC,UAAU,aAAf,SACI,oBAAIA,UAAU,YAAd,SACMtB,EAAWuB,KAAI,SAACC,EAAMZ,GACpB,OACI,cAAC,IAAD,CAA2Ba,YAAab,EAAM,IAAKA,MAAOA,EAA1D,SACC,SAACK,GACE,OACI,yDACAE,IAAKF,EAASG,UACVH,EAASS,gBACTT,EAASU,iBAHb,cAKKf,EAAM,EALX,KAKgBY,KALPZ,KAHDA,EAAM,wBChI/CgB,G,MAdG,WACd,OACI,qCACI,2CACI,qBAAKN,UAAU,aAAf,SAGI,cAAC,EAAD,WCHLO,MATf,WACE,OACE,sBAAKP,UAAU,MAAf,UACE,qCACA,cAAC,EAAD,QCKSQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.38d6a353.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport Task from \"../Task/Task\"\nimport { data } from \"../../Data/Data\"\n\nimport \"./Board.css\"\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n\nconst Board = (props) => {\n\n    // const [actualData, setActualData] = useState([\n    //     {\n    //         name: \"Yet to start\",\n    //         id: \"first\",\n    //         tasks: [\"First\",\"Second\",\"Third\"]\n    //     },\n    //     {\n    //         name: \"In progress\",\n    //         id: \"second\",\n    //         tasks: [\"First\",\"Third\"]\n    //     },\n    //     {\n    //         name: \"Finished\",\n    //         id: \"third\",\n    //         tasks: [\"Second\"]\n    //     }\n    // ]) \n\n    const [board1] = useState({\n        name: \"Yet to start\",\n        id: \"first\",\n        tasks: [\"First\",\"Second\",\"Third\"]\n    })\n    let [board1Data, setBoard1Data] = useState(board1.tasks)\n\n    const [board2] = useState({\n        name: \"In progress\",\n        id: \"second\",\n        tasks: [\"First\",\"Third\"]\n    })\n    let [board2Data, setBoard2Data] = useState(board2.tasks)\n\n    const [board3] = useState({\n        name: \"Finished\",\n        id: \"third\",\n        tasks: [\"Second\"]\n    })\n    let [board3Data, setBoard3Data] = useState(board3.tasks)\n\n\n    const handleDragEnd = (event) => {\n        console.log(51, board1Data, board2Data)\n        if(!event.destination){\n            return\n        }\n        console.log(20, event, event.source.droppableId)\n\n        if(event.source.droppableId === event.destination.droppableId){\n            if(event.source.droppableId === \"Box1\"){\n                const items = [...board1Data]   \n                console.log(84, items)         \n                const [reorderedItem] = items.splice(event.source.index, 1)\n                items.splice(event.destination.index,0,reorderedItem)\n                setBoard1Data(items)\n            } else if(event.source.droppableId === \"Box2\"){\n                const items = [...board2Data]\n                const [reorderedItem] = items.splice(event.source.index, 1)\n                items.splice(event.destination.index,0,reorderedItem)\n                setBoard2Data(items)\n            }\n        } else {\n            console.log(\"From one to another\")\n            let sourceIds;\n            let itemToBeMoved;\n            if(event.source.droppableId === \"Box1\"){\n                sourceIds = [...board1Data]\n            } else if(event.source.droppableId === \"Box2\") {\n                sourceIds = [...board2Data]\n            }\n\n            [itemToBeMoved] = sourceIds.splice(event.source.index, 1)\n            \n            if(event.source.droppableId === \"Box1\"){\n                console.log(83, sourceIds)\n               setBoard1Data(sourceIds)\n            } else {\n                setBoard2Data(sourceIds)\n            }\n            console.log(sourceIds)\n\n            let destinationIds;\n            if(event.destination.droppableId === \"Box1\" ) {\n                destinationIds = [...board1Data]\n            } else if(event.destination.droppableId === \"Box2\") {\n                destinationIds = [...board2Data]\n                \n            }\n\n            destinationIds.splice(event.destination.index,0, itemToBeMoved)\n\n            if(event.destination.droppableId === \"Box1\" ) {\n                setBoard1Data(destinationIds)\n            } else {\n                setBoard2Data(destinationIds)\n            }\n            console.log(104, destinationIds, event.destination.droppableId)\n        }\n      \n    }\n\n    return (\n        <DragDropContext onDragEnd={handleDragEnd}>\n            <Droppable droppableId=\"Box1\">\n                {(provided) => (\n                    <div {...provided.droppableProps} ref={provided.innerRef}>\n                        {provided.placeholder}\n                        <div className=\"board-main\">\n                            <ul className=\"list-main\">\n                                { board1Data.map((task, index) => {\n                                    return (\n                                        <Draggable key={index+\"1\"} draggableId={index+\"1\"} index={index}>\n                                        {(provided) => {\n                                            return (\n                                                <li key={index} \n                                                ref={provided.innerRef} \n                                                {...provided.draggableProps} \n                                                {...provided.dragHandleProps}\n                                                >\n                                                    {index+1}: {task}\n                                                </li>\n                                                )\n                                        }}\n                                        </Draggable>\n                                    )\n                                }) }\n                                {/* {board1Data.map(item => <p>{item}</p>)} */}\n                            </ul>\n                        </div>\n                    </div>                                                \n                )}\n            </Droppable>\n\n            <Droppable droppableId=\"Box2\">\n                {(provided) => (\n                    <div {...provided.droppableProps} ref={provided.innerRef}>\n                        {provided.placeholder}\n                        <div className=\"board-main\">\n                            <ul className=\"list-main\">\n                                { board2Data.map((task, index) => {\n                                    return (\n                                        <Draggable key={index+\"2\"} draggableId={index+\"2\"} index={index}>\n                                        {(provided) => {\n                                            return (\n                                                <li key={index} \n                                                ref={provided.innerRef} \n                                                {...provided.draggableProps} \n                                                {...provided.dragHandleProps}\n                                                >\n                                                    {index+1}: {task}\n                                                </li>\n                                                )\n                                        }}\n                                        </Draggable>\n                                    )\n                                }) }\n                            </ul>\n                        </div>\n                    </div>                                                \n                )}\n            </Droppable>\n        </DragDropContext>\n    )\n}\n\nexport default Board;","import React from \"react\"\nimport Board from \"../Board/Board\";\nimport { data } from \"../../Data/Data\"\n\n\nimport \"./Dashboard.css\"\n\n\nconst Dashboard = () => {\n    return (\n        <>\n            <h1>Dashboard</h1>\n                <div className=\"all-boards\">\n                    \n                    {/* <Board boardName={item.name} tasks={item.tasks} id={item.id}/> */}\n                    <Board />\n                            \n                </div>\n        </>\n    )\n}\n\nexport default Dashboard;","import './App.css';\nimport Dashboard from \"./Components/Dashboard/Dashboard\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>App</h1>\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}